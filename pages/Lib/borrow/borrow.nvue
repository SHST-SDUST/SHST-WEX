<template>
	<scrollpage>

		<layout title="借阅查询">
			<view v-for="(item,index) in data" :key="index">
				<view class="card">
					<text class="info strong">{{item[0]}}</text>
					<text class="info">{{item[1]}}</text>
					<text class="info">{{item[2]}}</text>
					<text class="info">{{item[3]}}</text>
					<text class="info">{{item[4]}}</text>
					<text class="info">{{item[5]}}</text>
					<text class="info">{{item[6]}}</text>
					<text class="info" style="margin-bottom: 7px;">{{item[7]}}</text>
				</view>
				<view class="hr"></view>
			</view>
		</layout>


		<layout title="Tips:">
			<text class="tips">1.图书馆逾期是不扣钱的 </text>
			<text class="tips">2.如果您借了书但出现PARSE ERROR，有可能您修改了图书馆默认密码，或者是图书馆服务器暂时瘫痪</text>
			<text class="tips">3.学校图书馆外网访问会定时关闭，正常使用时间大约是在 7:00-22:00</text>
		</layout>

	</scrollpage>
</template>

<script>
	const app = getApp();
	const util = require("@/utils/util.js")
	const md5 = require("@/utils/md5.js")
	import layout from "@/components/layout.nvue"
	import scrollpage from "@/components/scrollpage.nvue"
	export default {
		components: {
			layout,
			scrollpage
		},
		data() {
			return {
				data: []
			}
		},
		onReady: function() {
			app.resize(dom, this)
		},
		onLoad: function() {
			var curData = new Date();
			var startTime = "7:00";
			var endTime = "22:30";
			var curTime = curData.getHours() + ":" + curData.getMinutes();
			if (util.compareTimeInSameDay(startTime, curTime) || util.compareTimeInSameDay(curTime, endTime)) {
				app.toast("当前时间图书馆服务已关闭");
				return;
			}
			var that = this;
			app.ajax({
				load: 2,
				url: "http://interlib.sdust.edu.cn/opac/m/reader/doLogin?returnUrl=/m/loan/renewList",
				data: {
					"rdid": app.globalData.account.substr(2),
					"rdPasswd": md5.hexMD5(app.globalData.account.substr(2))
				},
				fun: function(res) {
					if (res.data.match(/当前无借阅记录/)) {
						this.completeLoad = () => app.toast("暂无借阅记录");
						return true;
					}
					var infoArr = [];
					res.data.match(/<li>[\s\S]*?<\/li>/g).forEach(value => {
						var infoArrInner = [];
						infoArrInner.push(value.match(/<h3>.*?<\/h3>/)[0].replace(/[<h3>]|[<\/h3>]/g, ""));
						value.match(/<p.*?>[\s\S]*?<\/p>/g).forEach(value2 => {
							infoArrInner.push(value2);
						})
						infoArr.push(infoArrInner);
					})
					infoArr = infoArr.map((value) => {
						value = value.map((value2) => {
							value2 = value2.replace(/<p >/, "");
							value2 = value2.replace(/<p  class="remind">/, "");
							value2 = value2.replace(/<\/p>/, "");
							return value2;
						});
						return value;
					})
					console.log(infoArr);
					that.data = infoArr
				}
			})
		},
		methods: {

		}
	}
</script>

<style>
	.strong {
		font-size: 21px;
		line-height: 27px;
	}

	.hr {
		margin: 3px 0;
		background-color: #eee !important;
		height: 1px;
	}

	.info {
		font-size: 15px;
		margin-top: 7px;
	}

	.tips {
		font-size: 15px;
		line-height: 25px;
	}
</style>
