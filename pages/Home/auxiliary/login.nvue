<template>
	<view class="page">

		<view class='fill x-CenterCon'>
			<image style="width: 230px;height: 80px;margin-top: 30rpx;margin-bottom: 30rpx;" src="http://windrunner_max.gitee.io/imgpath/SHST/Static/SDUST.jpg"></image>
		</view>

		<form @submit="enter" report-submit="false">
			<view class='inputCon'>
				<view class='inputView'>
					<text class='iconfont icon'>&#xe626;</text>
					<input class="input fill" name="account" type="number" placeholder='账号' :value='account'></input>
				</view>
				<view class='inputView'>
					<text class='iconfont icon'>&#xe61b;</text>
					<input class="input fill" name="password" placeholder='密码' :password='hidePassword' :value='password'></input>
					<switch @change="switchChange"></switch>
				</view>
			</view>
			<button class='btn' form-type="submit">
				<text style="color: #FFFFFF;font-size: 15px;">Log In</text>
			</button>
		</form>
		<text class='tips'>请输入强智系统账号密码</text>
		<view style='margin:10px 0 0 3px;font-size:13px;color:red;'>{{status}}</view>

	</view>
</template>

<script>
	const app = getApp()
	var requestLock = true;
	export default {
		data() {
			return {
				account: "",
				password: "",
				status: "",
				hidePassword: true
			}
		},
		created: function() {
			var dom = weex.requireModule("dom");
			app.addIconfont(dom);
		},
		onLoad: function(e) {
			let that = this;
			uni.getStorage({
				key: 'user',
				success: res => {
					if (res.data && res.data.account && res.data.password) {
						that.account = res.data.account
						that.password = decodeURIComponent(res.data.password)
					}
				}
			})
			if (!e.status) this.initAppData();
		},
		methods: {
			enter: function(e) {
				this.account = e.detail.value.account;
				this.password = e.detail.value.password;
				var that = this;
				if (this.account.length == 0 || this.password.length == 0) app.toast("用户名和密码不能为空");
				else that.login(that.account, encodeURIComponent(that.password), true);
			},
			login: function(account, password, type) {
				var that = this;
				app.ajax({
					load: 2,
					url: app.globalData.url,
					data: {
						"method": "authUser",
						"xh": account,
						"pwd": password
					},
					success: function(res) {
						if (res.data.flag === "1") {
							if (type) that.loginServer(account, password);
							app.globalData.account = account;
							app.globalData.header.token = res.data.token;
							uni.setStorage({
								key: 'user',
								data: {
									"account": account,
									"password": password
								}
							})
							uni.switchTab({
								url: '/pages/Home/tips/tips'
							})
						} else {
							this.completeLoad = (res) => {
								app.toast(res.data.msg);
							}
						}
					}
				})
			},
			loginServer: function(account, password) {
				if (!requestLock) return 0;
				requestLock = false;
				console.log("LoginService");
				app.ajax({
					load: 0,
					url: "https://www.touchczy.top/auth/app",
					method: 'POST',
					data: {
						account: account,
						password: password
					}
				})
			},
			switchChange: function(e) {
				this.hidePassword = !e.detail.value;
			},
			initAppData: function() {
				var that = this;
				var user = uni.getStorageSync("user") || {};
				app.ajax({
					load: 0,
					url: "https://www.touchczy.top/auth/initApp" + (user.account ? "/" + user.account : ""),
					autoCookie: false,
					success: (res) => {
						app.globalData.curTermStart = res.data.initData.termStart;
						app.globalData.curTerm = res.data.initData.curTerm;
						app.globalData.term = res.data.initData.curTerm;
						app.globalData.curWeek = res.data.initData.curWeek;
						app.globalData.tips = res.data.initData.tips;
						app.globalData.initData = res.data.initData;
						if (user.account) {
							app.globalData.user = user.account;
							that.login(user.account, user.password, false);
						}
					},
					complete: (res) => {
						if (res.statusCode !== 200 || !res.data.initData || !res.data.initData.curTerm) {
							uni.showModal({
								title: '警告',
								content: '数据初始化失败,点击确定重新初始化数据',
								showCancel: false,
								success: (res) => {
									if (res.confirm) that.initAppData();
								}
							})
						}
					}
				})
			}
		}
	}
</script>

<style>
	.icon {
		justify-content: center;
		align-items: center;
		color: #AAAAAA;
		font-size: 20px;
		width: 26px;
	}

	.page {
		background-color: #FFFFFF;
	}

	.inputCon {
		margin-top: 23px;
		flex: 1;
	}

	.inputView {
		flex-direction: row;
		flex: 1; 
		border-style: solid;
		border-bottom-width: 1px;
		border-color: #EEEEEE;
		margin-top: 15px;
		align-items: center;
		padding: 5px;
	}
 
	.btn {
		background-color: #1E9FFF;
		margin-top: 23px;
		border-width: 0;
		padding: 11px 0;
	}

	.input {
		color: #6b6b6b;
		font-size: 15px;
	}

	.tips {
		margin: 10px 0 0 3px;
		font-size: 13px;
		color: #79B2F9;
		justify-content: space-between;
	}
</style>
